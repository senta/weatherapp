{"version":3,"sources":["services/weather.ts","components/KeywordSuggest.tsx","components/CitySuggest.tsx","components/WeatherForm.tsx","components/ResponsePreview.tsx","components/Usage.tsx","libs/dom-utils.ts","components/App.tsx","index.tsx"],"names":["currentWeather","city","unit","query","URLSearchParams","set","callAPI","searchCities","prefix","a","res","distinctNames","cities","names","exists","Set","i","length","el","has","name","add","push","toUpperCase","substr","path","fetch","then","ok","json","SuggestList","keywords","onSelect","useState","index","setIndex","useEffect","hanlder","e","keyCode","preventDefault","window","addEventListener","removeEventListener","StyledSuggestList","map","word","key","onMouseDown","className","undefined","styled","ul","KeywordSuggest","children","active","setActive","modifiedInput","React","cloneElement","onBlur","onFocus","StyledWrapper","keyword","div","SuggestInput","value","onChange","candidates","setCandidates","debouncedSearchCities","useMemo","debounce","StyledInput","currentTarget","input","WeatherForm","onSearch","disable","errorMessage","setCity","id","action","autoComplete","onSubmit","StyledFieled","StyledSubmitButton","type","disabled","StyledErrorMessage","button","p","ResponsePreview","response","weather","StyledCodeBlock","JSON","stringify","WeatherInfo","StyledWeatherInfo","description","icon","src","alt","main","Usage","message","setMessage","codeRef","useRef","location","protocol","host","StyledMessage","ref","onClick","current","selection","getSelection","range","document","createRange","selectNodeContents","removeAllRanges","addRange","selectElement","App","setResponse","loading","setLoading","setErrorMessage","handleSearch","handleError","err","Math","floor","status","data","Wrapper","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3826656d.chunk.js","sourcesContent":["type WeatherUnit = \"imperial\" | \"metric\";\n\ntype City = {\n  name: string;\n};\n\n/**\n * Fetch current weather for the city\n */\nexport function currentWeather(city: string, unit: WeatherUnit) {\n  const query = new URLSearchParams();\n  query.set(\"city\", city);\n  query.set(\"unit\", unit);\n\n  return callAPI(\"/v1/weather?\" + query);\n}\n\n/**\n * Search available city names\n */\nexport async function searchCities(prefix: string) {\n  const query = new URLSearchParams();\n  query.set(\"q\", prefix);\n  query.set(\"limit\", \"20\");\n\n  const res = await callAPI(\"/v1/city?\" + query);\n  return distinctNames(res);\n}\n\n/**\n * Pick names from the list of cities and distinct it\n */\nfunction distinctNames(cities: City[]) {\n  const names = [];\n  const exists = new Set<string>();\n\n  for (let i = 0; i < cities.length; i++) {\n    const el = cities[i];\n    if (exists.has(el.name)) {\n      continue;\n    }\n    exists.add(el.name);\n    names.push(el.name[0].toUpperCase() + el.name.substr(1));\n  }\n  return names;\n}\n\n/**\n * call `fetch` to fetch JSON response\n */\nfunction callAPI(path: string) {\n  let url = path;\n  if (process.env.NODE_ENV === \"development\") {\n    url = \"http://localhost:5000\" + path;\n  }\n  return fetch(url).then((res) => {\n    if (!res.ok) {\n      throw res;\n    }\n    return res.json();\n  });\n}\n","import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\n\ntype SuggestListProps = {\n  onSelect: (keyword: string) => void;\n  keywords: string[];\n};\n\nconst SuggestList: React.FC<SuggestListProps> = ({ keywords, onSelect }) => {\n  const [index, setIndex] = useState(0);\n\n  useEffect(() => {\n    const hanlder = (e: KeyboardEvent) => {\n      if (e.keyCode === 40) {\n        e.preventDefault();\n        setIndex((index + 1) % keywords.length);\n      } else if (e.keyCode === 38) {\n        e.preventDefault();\n        setIndex((index - 1 + keywords.length) % keywords.length);\n      } else if (e.keyCode === 13) {\n        e.preventDefault();\n        onSelect(keywords[index]);\n      }\n    };\n\n    window.addEventListener(\"keydown\", hanlder);\n    return () => {\n      window.removeEventListener(\"keydown\", hanlder);\n    };\n  }, [keywords, index, onSelect]);\n\n  return (\n    <StyledSuggestList>\n      {keywords.map((word, i) => (\n        <li\n          key={word}\n          onMouseDown={() => onSelect(word)}\n          className={i === index ? \"index\" : undefined}\n        >\n          {word}\n        </li>\n      ))}\n    </StyledSuggestList>\n  );\n};\n\nconst StyledSuggestList = styled.ul`\n  position: absolute;\n  top: 100%;\n  left: 0;\n  right: 0;\n  margin: 0;\n  padding: 0;\n  list-style: none;\n  background: white;\n  border: 1px solid lightgray;\n\n  li {\n    padding: 0.6em 0.4em;\n    cursor: pointer;\n\n    & + & {\n      border-top: 1px solid lightgray;\n    }\n\n    &.index,\n    &:hover {\n      background-color: azure;\n    }\n  }\n`;\n\ntype KeywordSuggestProps = {} & SuggestListProps;\n\nexport const KeywordSuggest: React.FC<KeywordSuggestProps> = ({\n  children,\n  keywords,\n  onSelect,\n}) => {\n  const [active, setActive] = useState(false);\n  const modifiedInput = React.cloneElement(children as any, {\n    onBlur: () => {\n      setActive(false);\n    },\n    onFocus: () => {\n      setActive(keywords.length > 0);\n    },\n  });\n\n  const handleSelect = (keyword: string) => {\n    onSelect(keyword);\n    setActive(false);\n  };\n\n  useEffect(() => {\n    setActive(keywords.length > 0);\n  }, [keywords.length]);\n\n  return (\n    <StyledWrapper>\n      {modifiedInput}\n      {active && <SuggestList keywords={keywords} onSelect={handleSelect} />}\n    </StyledWrapper>\n  );\n};\n\nconst StyledWrapper = styled.div`\n  position: relative;\n`;\n","import React, { useState, useMemo } from \"react\";\nimport styled from \"styled-components\";\nimport { debounce } from \"lodash\";\n\nimport { searchCities } from \"../services/weather\";\nimport { KeywordSuggest } from \"./KeywordSuggest\";\n\ntype SuggestInputPorps = {\n  value: string;\n  onChange: (selected: string) => void;\n};\nexport const SuggestInput: React.FC<SuggestInputPorps> = ({\n  value,\n  onChange,\n}) => {\n  const [candidates, setCandidates] = useState<string[]>([]);\n\n  const debouncedSearchCities = useMemo(\n    () =>\n      debounce(async (value: string) => {\n        if (!value) {\n          return;\n        }\n        const candidates = await searchCities(value);\n        setCandidates(candidates);\n      }, 120),\n    []\n  );\n\n  const handleChange = (e: React.FormEvent<HTMLInputElement>) => {\n    const value = e.currentTarget.value;\n    onChange(value);\n    debouncedSearchCities(value);\n    if (!value) {\n      setCandidates([]);\n    }\n  };\n\n  return (\n    <StyledWrapper>\n      <KeywordSuggest keywords={candidates} onSelect={onChange}>\n        <StyledInput value={value} onChange={handleChange} />\n      </KeywordSuggest>\n    </StyledWrapper>\n  );\n};\n\nconst StyledInput = styled.input`\n  -webkit-appearance: none;\n  appearance: none;\n  padding: 0.6em;\n  border-radius: 4px;\n  border: 1px solid #aeaeae;\n  font: inherit;\n  width: 100%;\n`;\n\nconst StyledWrapper = styled.div`\n  flex: 1;\n`;\n","import React, { useState } from \"react\";\n\nimport { SuggestInput } from \"./CitySuggest\";\nimport styled from \"styled-components\";\n\ntype WeatherFormPorps = {\n  onSearch: (message: string) => void;\n  disable: boolean;\n  errorMessage: string;\n};\n\nexport const WeatherForm: React.FC<WeatherFormPorps> = ({\n  onSearch,\n  disable,\n  errorMessage,\n}) => {\n  const [city, setCity] = useState(\"\");\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    onSearch(city);\n  };\n\n  return (\n    <form id=\"form\" action=\"#\" autoComplete=\"off\" onSubmit={handleSubmit}>\n      <StyledFieled>\n        <SuggestInput value={city} onChange={(value) => setCity(value)} />\n        <StyledSubmitButton name=\"submit\" type=\"submit\" disabled={disable}>\n          Check Weather\n        </StyledSubmitButton>\n      </StyledFieled>\n      {errorMessage && (\n        <StyledErrorMessage id=\"error-fieled\" className=\"form-error\">\n          {errorMessage}\n        </StyledErrorMessage>\n      )}\n    </form>\n  );\n};\n\nconst StyledSubmitButton = styled.button`\n  appearance: none;\n  padding: 0.6em;\n  font: inherit;\n  cursor: pointer;\n  border-radius: 4px;\n  border: 1px solid #aeaeae;\n  margin-left: 8px;\n  background-color: #576ac7;\n  color: white;\n  position: relative;\n\n  &:disabled {\n    cursor: default;\n  }\n  &:disabled::after {\n    content: \"\";\n    position: absolute;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    right: 0;\n    background: rgba(255, 255, 255, 0.3);\n  }\n`;\n\nconst StyledFieled = styled.div`\n  display: flex;\n`;\n\nconst StyledErrorMessage = styled.p`\n  color: #cd3b19;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\ntype ResponsePreviewProps = {\n  response: any;\n};\n\nexport const ResponsePreview: React.FC<ResponsePreviewProps> = ({\n  response,\n}) => (\n  <aside className=\"result\">\n    <h3>Response</h3>\n    {response && response.weather && response.weather.length > 0 && (\n      <WeatherInfo weather={response.weather[0]} />\n    )}\n    <StyledCodeBlock>\n      <code>\n        <pre>{response ? JSON.stringify(response, null, 4) : \"No Data\"}</pre>\n      </code>\n    </StyledCodeBlock>\n  </aside>\n);\n\nconst StyledCodeBlock = styled.div`\n  background: #f1f3f4;\n  padding: 0.6em;\n`;\n\ntype WeatherInfoProps = {\n  weather: {\n    main: string;\n    description: string;\n    icon: string;\n  };\n};\n\nconst WeatherInfo: React.FC<WeatherInfoProps> = ({ weather }) => (\n  <StyledWeatherInfo>\n    It's {weather.description}\n    <img\n      key={weather.icon}\n      src={`http://openweathermap.org/img/wn/${weather.icon}@2x.png`}\n      alt={weather.main}\n    />\n  </StyledWeatherInfo>\n);\n\nconst StyledWeatherInfo = styled.div`\n  font-size: 1.4rem;\n  > img {\n    width: 50px;\n    vertical-align: middle;\n  }\n`;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport styled from \"styled-components\";\n\nimport { selectElement } from \"../libs/dom-utils\";\n\nexport const Usage: React.FC = () => {\n  const [message, setMessage] = useState(\"\");\n  const codeRef = useRef<HTMLElement>(null);\n\n  useEffect(() => {\n    const { protocol, host } = window.location;\n    setMessage(`curl ${protocol}//${host}/v1/weather?city=<City>`);\n  }, []);\n\n  const handleClickCode = () => {\n    if (codeRef.current) {\n      selectElement(codeRef.current);\n    }\n  };\n\n  return (\n    <StyledMessage className=\"doc-message\">\n      You can call the API with `\n      <code ref={codeRef} onClick={handleClickCode}>\n        {message}\n      </code>\n      `\n    </StyledMessage>\n  );\n};\n\nconst StyledMessage = styled.p`\n  font-size: 0.8rem;\n`;\n","/**\n * Select text on the element\n */\nexport function selectElement(el: HTMLElement) {\n  const selection = window.getSelection();\n  if (!selection) {\n    return;\n  }\n  const range = document.createRange();\n\n  range.selectNodeContents(el);\n  selection.removeAllRanges();\n  selection.addRange(range);\n}\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { currentWeather } from \"../services/weather\";\nimport { WeatherForm } from \"./WeatherForm\";\nimport { ResponsePreview } from \"./ResponsePreview\";\nimport { Usage } from \"./Usage\";\n\nexport const App: React.FC = () => {\n  const [response, setResponse] = useState<any>(null);\n  const [loading, setLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  const handleSearch = async (city: string) => {\n    // validate tje value\n    if (city === \"\") {\n      setErrorMessage(\"City name is required\");\n      return;\n    }\n    setErrorMessage(\"\");\n\n    try {\n      setLoading(true);\n\n      const res = await currentWeather(city, \"imperial\");\n      setResponse(res);\n    } catch (err) {\n      setResponse(null);\n      handleError(err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleError = (err: Response) => {\n    const _default_message = \"Failed to load weather\";\n\n    if (Math.floor(err.status / 100) !== 4) {\n      setErrorMessage(_default_message);\n      return;\n    }\n\n    err.json().then((data) => {\n      if (data.message.city) {\n        setErrorMessage(data.message.city);\n      } else {\n        setErrorMessage(_default_message);\n      }\n    });\n  };\n\n  return (\n    <Wrapper>\n      <WeatherForm\n        onSearch={handleSearch}\n        errorMessage={errorMessage}\n        disable={loading}\n      />\n      <Usage />\n      <ResponsePreview response={response} />\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled.div`\n  padding: 8px;\n  margin: 0 auto;\n  margin-top: 60px;\n  max-width: 680px;\n  @media screen and (max-width: 767px) {\n    & {\n      margin-top: 20px;\n    }\n  }\n`;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}